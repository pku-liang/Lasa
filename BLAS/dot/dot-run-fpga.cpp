/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The only header file needed for including T2S.
#include "util.h"

// The header file generated by dot.cpp
#include "dot-interface.h"

// Roofline utilities
#include "Roofline.h"


// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

using namespace std;

#ifdef T2SP_DDOT
    #define DATA_TYPE double
    #define COEFFICIENT 2.0
    #define INIT float(std::rand()) / float(RAND_MAX) - 0.5f
#elif defined (T2SP_CDOT)
    #define DATA_TYPE complex32_t
    #define COEFFICIENT 8.0
    #define INIT complex32_t(float(std::rand()) / float(RAND_MAX) - 0.5f, float(std::rand()) / float(RAND_MAX) - 0.5f)
#elif defined (T2SP_ZDOT)
    #define DATA_TYPE complex64_t
    #define COEFFICIENT 8.0
    #define INIT complex64_t(float(std::rand()) / float(RAND_MAX) - 0.5f, float(std::rand()) / float(RAND_MAX) - 0.5f)
#else
    #define DATA_TYPE float
    #define COEFFICIENT 2.0
    #define INIT float(std::rand()) / float(RAND_MAX) - 0.5f
#endif

#ifdef TINY
constexpr int TOTAL_K = 2048;
#else
constexpr int TOTAL_K = 64 * 1024 * 1024; 
#endif

int main()
{
    Halide::Runtime::Buffer<DATA_TYPE> x(TOTAL_K, 1), y(TOTAL_K, 1), o(1);

    for (size_t k = 0; k < TOTAL_K; k++) {
        x(k, 0) = INIT;
        y(k, 0) = INIT;
    }

    dot(x, y, o);

#ifdef TINY
    DATA_TYPE golden{};
    for (size_t k = 0; k < TOTAL_K; k++)
        golden += x(k) * y(k);
#if defined(T2SP_CDOT) || defined(T2SP_ZDOT)
    assert(fabs(golden.re() - o(0).re()) <= 0.005 * fabs(golden.re()) &&
           fabs(golden.im() - o(0).im()) <= 0.005 * fabs(golden.im()));
#else
    assert(fabs(golden - o(0)) <= 0.005 * fabs(golden));
#endif
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
    float mem_bandwidth = 34; // pac_a10 on DevCloud has 34GB/s memory bandwidth
    float compute_roof = 2 * DSPs() * FMax();
    float number_ops = COEFFICIENT * TOTAL_K; // Total operations (GFLOP for GEMV), independent of designs
    float number_bytes = number_ops * sizeof(DATA_TYPE);
    float exec_time = ExecTime();
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes,exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }
#endif
    
    printf("Size of Vector X = %d\nSize of Vector Y = %d\n", TOTAL_K, TOTAL_K);
    printf("Success\n");
    return 0;
}
